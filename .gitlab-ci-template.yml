image: registry.gitlab.ics.muni.cz:443/muni-kypo-images/docker-image-builder/packer:latest

stages:
  - validate
  - build
  - test
  - deploy

workflow:
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - when: always

variables:
  GUI_ACCESS: "false"

default:
  tags:
    - image-builder

validate:
  stage: validate
  script:
    - packer --version
    - packer validate $NAME.json
  needs: []

.build:
  stage: build
  cache:
    paths:
      - packer_cache
  when: manual
  allow_failure: false
  timeout: 3h
  resource_group: virtual-machine
  needs: ["validate"]

build-qemu:
  extends: .build
  script:
    - packer build -only=qemu $NAME.json
  artifacts:
    paths:
      - target-qemu/*

build-vbox:
  extends: .build
  script:
    - packer build -only=vbox $NAME.json
  artifacts:
    paths:
      - target-vbox/*

test-qemu:
  stage: test
  script:   # Changes made to this script need to be manually reflected in the windows template
    # Generate keys and provide them via a disk to cloud-init
    - ssh-keygen -f ./id_rsa -N "" -C mykey
    - mkdir -p drive/openstack/latest
    - echo "{\"uuid\":\"d8e02d56-2648-49a3-bf97-6be8f1204f38\", \"public_keys\":{\"mykey\":\"`cat id_rsa.pub`\"}}" > drive/openstack/latest/meta_data.json
    - mkisofs -R -J -V config-2 -o config.img drive/
    # Run the VM, run Ansible
    - qemu-system-x86_64 -accel kvm -m size=4096 --smp 4 -device nec-usb-xhci,id=usb,bus=pci.0,addr=0x4 -device usb-tablet -net nic -net user,hostfwd=tcp::2222-:22 -cdrom config.img target-qemu/* &
    - echo "ssh ansible_user=$DISTRO ansible_port=2222 ansible_host=127.0.0.1 ansible_connection=ssh" > inventory
    - ANSIBLE_HOST_KEY_CHECKING=false ansible-playbook --private-key id_rsa -i inventory --ssh-extra-args "-o UserKnownHostsFile=/dev/null -o IdentitiesOnly=yes -o ControlMaster=auto -o ControlPersist=60s" --timeout=30 -v playbook.yml
  resource_group: virtual-machine
  needs: ["build-qemu"]

test-vbox:
  stage: test
  script:
    - vagrant box add --name mybox target-vbox/*
    - vagrant up
  resource_group: virtual-machine
  needs: ["build-vbox"]

.upload-image-to-openstack:
  script:
    - openstack image create --file target-qemu/* --property hw_scsi_model=virtio-scsi --property hw_disk_bus=scsi --property hw_rng_model=virtio --property hw_qemu_guest_agent=yes --property os_require_quiesce=yes --property os_type=$TYPE --property os_distro=$DISTRO --property owner_specified.openstack.version=$VERSION --property owner_specified.openstack.gui_access=$GUI_ACCESS --property owner_specified.openstack.created_by=munikypo --shared $CI_PROJECT_NAME-$VERSION

deploy-qemu-test:
  stage: deploy
  before_script:
    - VERSION=$CI_COMMIT_SHORT_SHA
  script: !reference [.upload-image-to-openstack, script]
  when: manual
  needs: ["build-qemu"]
  variables:
    OS_AUTH_TYPE: "v3applicationcredential"
    OS_AUTH_URL: "https://identity.cloud.muni.cz/v3"
    OS_IDENTITY_API_VERSION: "3"
    OS_INTERFACE: "public"
    OS_REGION_NAME: "brno1"

.git-tag:
  script:
    - git config user.name "$GITLAB_USER_NAME"; git config user.email "$GITLAB_USER_EMAIL"
    - git tag -a "$KEY-$VERSION" -m "$KEY version $VERSION"
    - git push https://root:$ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git "$KEY-$VERSION"

.get-version-from-changelog:
  script:
    - test ! -z "$KEY"
    - if [ -z "$VERSION" ]; then
    -   VERSION=$(cat CHANGELOG.md | sed -r -e "/##\s+.*\[$KEY-[0-9]+\.[0-9]+\.[0-9]+\]/!d" -e "s/.*$KEY-([0-9]+\.[0-9]+\.[0-9]+).*/\1/" | sort --version-sort --reverse | head -n 1)
    -   test ! -z "$VERSION"
    - fi
    - echo "$VERSION"

.upload-image-to-openstack-object-store:
  script:
    - cd target-qemu
    - IMAGE_FILENAME=$(ls)
    - mv $IMAGE_FILENAME $IMAGE_FILENAME.raw

    - s3cmd -c $S3_CREDENTIALS get s3://kypo-images/SHA256SUMS SHA256SUMS
    - s3cmd -c $S3_CREDENTIALS get s3://kypo-images/MD5SUMS MD5SUMS

    - zip $CI_PROJECT_NAME.raw.zip $IMAGE_FILENAME.raw
    - sed -i "/$CI_PROJECT_NAME.raw.zip/d" SHA256SUMS
    - sha256sum $CI_PROJECT_NAME.raw.zip >> SHA256SUMS
    - sed -i "/$CI_PROJECT_NAME.raw.zip/d" MD5SUMS
    - md5sum $CI_PROJECT_NAME.raw.zip >> MD5SUMS

    - qemu-img convert -f raw -O qcow2 $IMAGE_FILENAME.raw $CI_PROJECT_NAME.qcow2
    - sed -i "/$CI_PROJECT_NAME.qcow2/d" SHA256SUMS
    - sha256sum $CI_PROJECT_NAME.qcow2 >> SHA256SUMS
    - sed -i "/$CI_PROJECT_NAME.qcow2/d" MD5SUMS
    - md5sum $CI_PROJECT_NAME.qcow2 >> MD5SUMS

    - sort -k 2 -o SHA256SUMS SHA256SUMS
    - sort -k 2 -o MD5SUMS MD5SUMS
    - s3cmd -c $S3_CREDENTIALS put $CI_PROJECT_NAME.qcow2 $CI_PROJECT_NAME.raw.zip SHA256SUMS MD5SUMS s3://kypo-images
    - cd -

deploy-qemu-master:
  extends: deploy-qemu-test
  before_script: !reference [.get-version-from-changelog, script]
  script:
   - !reference [.upload-image-to-openstack, script]
   - HEAD_IMAGE_ID=$(openstack image show --column id --format value $CI_PROJECT_NAME-$VERSION)
   # If previous image version exists, delete it or rename it. Once all our images follow the latest naming convention, this block can be simplified
   - if openstack image show $CI_PROJECT_NAME > /dev/null; then
   -   PREV_VERSION=$(openstack image show $CI_PROJECT_NAME --column properties --format json | jq '.properties."owner_specified.openstack.version"' -re) || PREV_VERSION=0.1.0
   -   if openstack image show $CI_PROJECT_NAME-$PREV_VERSION > /dev/null; then
   -     openstack image delete $CI_PROJECT_NAME || openstack image set $CI_PROJECT_NAME --name $CI_PROJECT_NAME-DEPRECATED
   -   else
   -     openstack image set $CI_PROJECT_NAME --name $CI_PROJECT_NAME-$PREV_VERSION
   -   fi
   - fi
   - openstack image set $CI_PROJECT_NAME-$VERSION --name $CI_PROJECT_NAME
   - !reference [.upload-image-to-openstack, script]
   - STABLE_IMAGE_ID=$(openstack image show --column id --format value $CI_PROJECT_NAME-$VERSION)
   - !reference [.git-tag, script]
   # Share the image to other OpenStack projects
   - while read -r PROJECT_ID; do
   -   openstack image add project $HEAD_IMAGE_ID $PROJECT_ID
   -   openstack image add project $STABLE_IMAGE_ID $PROJECT_ID
   - done < <(echo $APPLICATION_CREDENTIALS | jq -r '.[] | .project_id')
   # Accept the sharing from each project
   - while read -r APP_ID && read -r APP_SECRET; do
   -   OS_APPLICATION_CREDENTIAL_ID=$APP_ID
   -   OS_APPLICATION_CREDENTIAL_SECRET=$APP_SECRET
   -   openstack image set --accept $HEAD_IMAGE_ID
   -   openstack image set --accept $STABLE_IMAGE_ID
   - done < <(echo $APPLICATION_CREDENTIALS | jq -r '.[] | (.app_cred_id, .app_cred_secret)')
   - if [ $TYPE != "windows" ]; then
   -   !reference [.upload-image-to-openstack-object-store, script]
   - fi
  needs: ["build-qemu", "test-qemu"]
  timeout: 2h
  only:
    refs:
      - master
  variables:
    KEY: "qemu"

deploy-vbox:
  stage: deploy
  before_script: !reference [.get-version-from-changelog, script]
  script:
    - curl --header "Content-Type:application/json" --header "Authorization:Bearer $VAGRANT_CLOUD_TOKEN" https://app.vagrantup.com/api/v1/box/$VAGRANT_CLOUD_USER/$CI_PROJECT_NAME/versions --data "{\"version\":{\"version\":\"$VERSION\",\"description\":\"$DESCRIPTION\"}}"
    - curl --header "Content-Type:application/json" --header "Authorization:Bearer $VAGRANT_CLOUD_TOKEN" https://app.vagrantup.com/api/v1/box/$VAGRANT_CLOUD_USER/$CI_PROJECT_NAME/version/$VERSION/providers  --data "{\"provider\":{\"checksum\":\"`sha1sum target-vbox/* | awk '{print $1}'`\",\"checksum_type\":\"sha1\",\"name\":\"virtualbox\"}}"
    - UPLOAD_PATH=$(curl --header "Authorization:Bearer $VAGRANT_CLOUD_TOKEN" https://app.vagrantup.com/api/v1/box/$VAGRANT_CLOUD_USER/$CI_PROJECT_NAME/version/$VERSION/provider/virtualbox/upload | jq -r .upload_path)
    - curl $UPLOAD_PATH --request PUT --upload-file target-vbox/*
    - curl --header "Authorization:Bearer $VAGRANT_CLOUD_TOKEN"  https://app.vagrantup.com/api/v1/box/$VAGRANT_CLOUD_USER/$CI_PROJECT_NAME/version/$VERSION/release --request PUT
    - !reference [.git-tag, script]
  when: manual
  needs: ["build-vbox", "test-vbox"]
  only:
    refs:
      - master
  variables:
    VAGRANT_CLOUD_USER: "munikypo"
    KEY: "vbox"
